openapi: 3.0.0
info:
    title: BookTrac
    version: 1.0.0
servers:
    - {url: 'http://localhost:8080/'}
paths:
    /api/register: {post: {tags: [Auth], summary: 'Register a new user', requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {userName: {type: string, example: 'John Doe'}, email: {type: string, example: john.doe@example.com}, password: {type: string, example: password123}, role: {type: string, enum: [user, admin], example: user}}}}}}, responses: {'201': {description: 'User registered successfully'}, '400': {description: 'User with this username or email already exists'}, '500': {description: 'Error registering user'}}}}
    /api/login: {post: {tags: [Auth], summary: 'Login a user', requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {email: {type: string, example: john.doe@example.com}, password: {type: string, example: password123}}}}}}, responses: {'200': {description: 'Login successful', content: {application/json: {schema: {type: object, properties: {message: {type: string, example: 'Login successful'}, user: {$ref: '#/components/schemas/User'}, token: {type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}}}}}}, '401': {description: 'Invalid credentials'}, '404': {description: 'User not found'}, '500': {description: 'Error logging in'}}}}
    /api/refresh-token: {post: {tags: [Auth], summary: 'Refresh access token', responses: {'200': {description: 'Access token refreshed', content: {application/json: {schema: {type: object, properties: {accessToken: {type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}}}}}}, '403': {description: 'Forbidden - Invalid or expired refresh token'}}}}
    /api/logout: {post: {tags: [Auth], summary: 'Logout a user', responses: {'200': {description: 'Logged out successfully'}, '400': {description: 'No refresh token provided'}, '404': {description: 'User not found'}, '500': {description: 'Error logging out'}}}}
    '/categories/{categoryID}/books': {post: {tags: [Books], summary: 'Add a new book to a category', parameters: [{in: path, name: categoryID, required: true, description: 'ID of the category to add the book to', schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {title: {type: string, example: 'Example Book Title'}, author: {type: string, example: 'Author Name'}, description: {type: string, example: 'Description of the book.'}, publishedDate: {type: string, format: date, example: '2024-11-01'}, isbn: {type: string, example: 123-456-789}}}}}}, responses: {'201': {description: 'Book added successfully'}, '404': {description: 'Category not found'}, '500': {description: 'Error adding book'}}}}
    /books: {get: {tags: [Books], summary: 'Retrieve all books', responses: {'200': {description: 'Successfully retrieved all books'}, '404': {description: 'No records found'}, '500': {description: 'Error fetching books'}}}}
    '/books/{category}/{title}': {get: {tags: [Books], summary: 'Get a book by its title within a category', parameters: [{in: path, name: category, required: true, description: 'Category of the book', schema: {type: string}}, {in: path, name: title, required: true, description: 'Title of the book', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved book by title'}, '404': {description: 'Category or book not found'}, '500': {description: 'Error retrieving book'}}}}
    '/books/{bookId}': {get: {tags: [Books], summary: 'Get a book by its ID', parameters: [{in: path, name: bookId, required: true, description: 'ID of the book to retrieve', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved book by ID'}, '404': {description: 'Record not found'}}}}
    '/categories/{categoryId}/books': {get: {tags: [Books], summary: 'Get all books in a specific category', parameters: [{in: path, name: categoryId, required: true, description: 'ID of the category to retrieve books from', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved books for the category'}, '404': {description: 'No books found for this category'}, '500': {description: 'Error retrieving books'}}}}
    '/categories/{categoryID}/books/{bookID}': {get: {tags: [Books], summary: 'Get a specific book by its ID in a category', parameters: [{in: path, name: categoryID, required: true, description: 'ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'ID of the book', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved the book'}, '404': {description: 'Book not found'}, '500': {description: 'Error retrieving the book'}}}, put: {tags: [Books], summary: 'Update a book''s details', parameters: [{in: path, name: categoryID, required: true, description: 'ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'ID of the book', schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {title: {type: string, example: 'Updated Book Title'}, author: {type: string, example: 'Updated Author Name'}, description: {type: string, example: 'Updated description of the book.'}}}}}}, responses: {'200': {description: 'Successfully updated the book'}, '400': {description: 'Record was not updated'}, '422': {description: 'Invalid data'}}}, patch: {tags: [Books], summary: 'Partially update a book''s details', parameters: [{in: path, name: categoryID, required: true, description: 'ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'ID of the book', schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {title: {type: string, example: 'Partially Updated Book Title'}, description: {type: string, example: 'Partially updated description.'}}}}}}, responses: {'200': {description: 'Successfully updated the book'}, '404': {description: 'Record was not found'}, '422': {description: 'An error occurred while updating the record'}}}, delete: {tags: [Books], summary: 'Delete a book', parameters: [{in: path, name: categoryID, required: true, description: 'ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'ID of the book', schema: {type: string}}], responses: {'200': {description: 'Successfully deleted the book'}, '404': {description: 'Record was not found'}, '500': {description: 'Error trying to delete the record'}}}}
    /categories: {post: {tags: [Categories], summary: 'Create a new category', requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {topic: {type: string, example: 'New Category Topic'}, image: {type: string, example: 'http://example.com/image.jpg'}}}}}}, responses: {'201': {description: 'Successfully created a new category'}, '400': {description: 'Topic and image are required'}, '422': {description: 'Invalid data'}}}, get: {tags: [Categories], summary: 'Retrieve all categories', responses: {'200': {description: 'Successfully retrieved all categories'}, '404': {description: 'No categories found'}, '500': {description: 'Error fetching categories'}}}}
    '/categories/topic/{topic}': {get: {tags: [Categories], summary: 'Retrieve a category by topic', parameters: [{in: path, name: topic, required: true, description: 'The topic of the category', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved category by topic'}, '404': {description: 'Record not found'}}}}
    '/categories/title/{title}': {get: {tags: [Categories], summary: 'Retrieve a category by book title', parameters: [{in: path, name: title, required: true, description: 'The title of the book', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved category by book title'}, '404': {description: 'Book or category not found'}}}}
    '/categories/{id}': {get: {tags: [Categories], summary: 'Retrieve a category by ID', parameters: [{in: path, name: id, required: true, description: 'The ID of the category', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved category by ID'}, '404': {description: 'Record not found'}}}, put: {tags: [Categories], summary: 'Update a category', parameters: [{in: path, name: id, required: true, description: 'The ID of the category', schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {topic: {type: string, example: 'Updated Category Topic'}, image: {type: string, example: 'http://example.com/updated-image.jpg'}}}}}}, responses: {'200': {description: 'Successfully updated the category'}, '400': {description: 'Bad payload'}, '422': {description: 'Invalid data'}}}, patch: {tags: [Categories], summary: 'Partially update a category', parameters: [{in: path, name: id, required: true, description: 'The ID of the category', schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {topic: {type: string, example: 'Partially Updated Topic'}, image: {type: string, example: 'http://example.com/partially-updated-image.jpg'}}}}}}, responses: {'200': {description: 'Successfully updated the category'}, '404': {description: 'Record not found'}, '422': {description: 'Invalid data'}}}, delete: {tags: [Categories], summary: 'Delete a category', parameters: [{in: path, name: id, required: true, description: 'The ID of the category', schema: {type: string}}], responses: {'200': {description: 'Successfully deleted the category'}, '404': {description: 'Record was not deleted'}, '500': {description: 'An error occurred while trying to delete the record'}}}}
    /readbooks: {post: {tags: [ReadBooks], summary: 'Mark a book as read for a user', requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {userId: {type: string, example: 60d5f484f40c1a001f4f4c67}, bookId: {type: string, example: 60d5f4b8f40c1a001f4f4c68}}}}}}, responses: {'200': {description: 'Book already marked as read by user'}, '201': {description: 'Book marked as read successfully'}, '500': {description: 'Error marking book as read'}}}}
    '/readbooks/{userId}': {get: {tags: [ReadBooks], summary: 'Retrieve all read books for a user', parameters: [{in: path, name: userId, required: true, description: 'The ID of the user', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved read books'}, '500': {description: 'Error retrieving read books'}}}}
    '/readbooks/{userId}/{bookId}': {get: {tags: [ReadBooks], summary: 'Retrieve a specific read entry for a user', parameters: [{in: path, name: userId, required: true, description: 'The ID of the user', schema: {type: string}}, {in: path, name: bookId, required: true, description: 'The ID of the book', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved the read entry'}, '404': {description: 'Read entry not found'}, '500': {description: 'Error retrieving read entry'}}}, delete: {tags: [ReadBooks], summary: 'Remove a book from the read list for a user', parameters: [{in: path, name: userId, required: true, description: 'The ID of the user', schema: {type: string}}, {in: path, name: bookId, required: true, description: 'The ID of the book', schema: {type: string}}], responses: {'200': {description: 'Book removed from read list'}, '404': {description: 'Read entry not found'}, '500': {description: 'Error removing book from read list'}}}}
    /reviews: {get: {tags: [Reviews], summary: 'Retrieve all reviews', responses: {'200': {description: 'Successfully retrieved all reviews'}, '404': {description: 'No reviews found'}, '500': {description: 'Error fetching reviews'}}}}
    '/reviews/{id}': {get: {tags: [Reviews], summary: 'Retrieve a review by ID', parameters: [{in: path, name: id, required: true, description: 'The ID of the review', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved review'}, '404': {description: 'Record not found'}}}}
    '/categories/{categoryID}/books/{bookID}/reviews': {get: {tags: [Reviews], summary: 'Get all reviews for a specific book', parameters: [{in: path, name: categoryID, required: true, description: 'The ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'The ID of the book', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved reviews for the book'}, '500': {description: 'An error occurred while retrieving reviews'}}}}
    '/categories/{categoryID}/books/{bookID}/reviews/{reviewID}': {get: {tags: [Reviews], summary: 'Get a specific review by its ID', parameters: [{in: path, name: categoryID, required: true, description: 'The ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'The ID of the book', schema: {type: string}}, {in: path, name: reviewID, required: true, description: 'The ID of the review', schema: {type: string}}], responses: {'200': {description: 'Successfully retrieved the review'}, '404': {description: 'Review not found'}, '500': {description: 'An error occurred while retrieving the review'}}}, put: {tags: [Reviews], summary: 'Update a review', parameters: [{in: path, name: categoryID, required: true, description: 'The ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'The ID of the book', schema: {type: string}}, {in: path, name: reviewID, required: true, description: 'The ID of the review', schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {rating: {type: integer, example: 5}, comment: {type: string, example: 'Updated review text.'}}}}}}, responses: {'200': {description: 'Review was successfully updated'}, '404': {description: 'Record not found'}, '422': {description: 'Invalid rating'}}}, patch: {tags: [Reviews], summary: 'Partially update a review', parameters: [{in: path, name: categoryID, required: true, description: 'The ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'The ID of the book', schema: {type: string}}, {in: path, name: reviewID, required: true, description: 'The ID of the review', schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {type: object, properties: {rating: {type: integer, example: 4}, comment: {type: string, example: 'Partially updated review.'}}}}}}, responses: {'200': {description: 'Review was successfully updated'}, '404': {description: 'Record not found'}, '422': {description: 'Invalid rating'}}}, delete: {tags: [Reviews], summary: 'Delete a review', parameters: [{in: path, name: categoryID, required: true, description: 'The ID of the category', schema: {type: string}}, {in: path, name: bookID, required: true, description: 'The ID of the book', schema: {type: string}}, {in: path, name: reviewID, required: true, description: 'The ID of the review', schema: {type: string}}], responses: {'200': {description: 'Review was successfully deleted'}, '404': {description: 'Record was not found'}, '500': {description: 'An error occurred while trying to delete the record'}}}}
components:
    schemas: {User: {type: object, properties: {_id: {type: string, example: 60c72b2f9b1d4a001d1e9c8c}, userName: {type: string, example: 'John Doe'}, email: {type: string, example: john.doe@example.com}, password: {type: string, example: password123}, role: {type: string, enum: [user, admin], example: user}, expTokenTime: {type: string, format: date-time, example: '2024-11-02T15:21:42.926Z'}, expRefreshTokenTime: {type: string, format: date-time, example: '2024-11-02T15:21:42.926Z'}}}}
tags:
    - {name: Auth, description: 'Authentication management'}
    - {name: Books, description: 'Book management'}
